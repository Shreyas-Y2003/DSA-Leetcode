#include <vector>
using namespace std;

class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int i = m - 1;       // Pointer to the last valid element in nums1
        int j = n - 1;       // Pointer to the last element in nums2
        int k = m + n - 1;   // Pointer to the last position in nums1

        // Merge nums1 and nums2 starting from the back
        while (i >= 0 && j >= 0) {
            if (nums1[i] > nums2[j]) {
                nums1[k--] = nums1[i--];
            } else {
                nums1[k--] = nums2[j--];
            }
        }

        // Add remaining elements of nums2, if any
        while (j >= 0) {
            nums1[k--] = nums2[j--];
        }
    }
};
OR--------------------------------------------------------OR---------------------------------------------------------------------------------------------OR------------------------------------------------------------------------------------------------------------------- 
#include <vector>
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int n1=nums1.size();
        int n2=nums2.size();
        int i=0;int j=0;
        vector<int> u;
        
        while(i<n1 && j<n2){
            if(nums1[i]<=nums2[j]){
                if(u.size()==0||u.back()!=nums1[i]){
                    u.push_back(nums1[i]);
                }
                i++;
            
            }
            else{
                if(u.size()==0||u.back()!=nums2[i]){
                    u.push_back(nums2[j]);
                }
                j++;

            }
        }
        while(j<n2){

            if(u.size()==0||u.back()!=nums2[i]){
                    u.push_back(nums2[j]);
                }
                j++;
        }
        while(i<n1){
            if(u.size()==0||u.back()!=nums1[i]){
                    u.push_back(nums1[i]);
                }
                i++;
        }
        return u;
    }
};
